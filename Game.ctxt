#BlueJ class context
comment0.target=Game
comment0.text=\r\n\ \ This\ class\ is\ the\ main\ class\ of\ the\ "World\ of\ Zuul"\ application.\ \r\n\ \ "World\ of\ Zuul"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\ \ Users\ \r\n\ \ can\ walk\ around\ some\ scenery.\ That's\ all.\ It\ should\ really\ be\ extended\ \r\n\ \ to\ make\ it\ more\ interesting\!\r\n\ \r\n\ \ To\ play\ this\ game,\ create\ an\ instance\ of\ this\ class\ and\ call\ the\ "play"\r\n\ \ method.\r\n\ \r\n\ \ This\ main\ class\ creates\ and\ initialises\ all\ the\ others\:\ it\ creates\ all\r\n\ \ rooms,\ creates\ the\ parser\ and\ starts\ the\ game.\ \ It\ also\ evaluates\ and\r\n\ \ executes\ the\ commands\ that\ the\ parser\ returns.\r\n\ \r\n\ @author\ \ Michael\ K\u00F6lling\ and\ David\ J.\ Barnes\r\n\ @version\ 2016.02.29\r\n
comment1.params=
comment1.target=Game()
comment1.text=\r\n\ Create\ the\ game\ and\ initialise\ its\ internal\ map.\r\n
comment10.params=nextRoom
comment10.target=boolean\ canUnlock(Room)
comment10.text=\r\n\ Check\ if\ a\ room\ is\ locked.\r\n\ @param\ nextRoom\r\n\ @return\ true\ if\ room\ can\ be\ unlocked\r\n
comment11.params=nextRoom
comment11.target=void\ unlockRoom(Room)
comment11.text=\r\n\ Remove\ required\ items\ to\ unlock\ the\ room\ from\ player's\ inventory.\r\n\ Update\ the\ status\ of\ the\ room\ to\ unlocked.\r\n\ @param\ nextRoom\r\n
comment12.params=command
comment12.target=boolean\ quit(Command)
comment12.text=\r\n\ "Quit"\ was\ entered.\ Check\ the\ rest\ of\ the\ command\ to\ see\r\n\ whether\ we\ really\ quit\ the\ game.\r\n\ @return\ true,\ if\ this\ command\ quits\ the\ game,\ false\ otherwise.\r\n
comment13.params=command
comment13.target=void\ search(Command)
comment13.text=\r\n\ "Search\ your\ inventory\ or\ search\ the\ room\ for\ items"\r\n\ @param\ command\ -\ To\ check\ what\ user\ wants\ to\ search\r\n
comment14.params=command
comment14.target=void\ take(Command)
comment14.text=\r\n\ Take\ an\ item\ from\ the\ room\ and\ add\ it\ to\ inventory\ if\ there\ is\ space.\r\n\ If\ not,\ print\ an\ error\ message.\r\n\ @param\ command\r\n
comment15.params=
comment15.target=void\ back()
comment15.text=\r\n\ Method\ allowing\ user\ to\ go\ back\ to\ the\ previous\ room\ they\ came\ from\r\n\ Utilizes\ stack\ data\ structure\ to\ store\ previously\ visited\ rooms\ in\ order.\r\n
comment16.params=command
comment16.target=void\ dropItem(Command)
comment16.text=\r\n\ Drop\ an\ item\ from\ inventory.\ Dropped\ item\ gets\ stored\ in\ room.\r\n\ format\ -\ drop\ [item\ to\ drop]\r\n\ @param\ command\r\n
comment17.params=command
comment17.target=void\ trade(Command)
comment18.params=
comment18.target=boolean\ winCheck()
comment18.text=\r\n\ Method\ to\ check\ if\ the\ player\ has\ won\ the\ game.\r\n\ In\ this\ game,\ the\ game\ is\ won\ if\ the\ player\ enters\ the\ 'iron\ throne'\ room.\r\n\ The\ room\ is\ locked\ so\ they\ must\ complete\ the\ quest\ to\ unlock\ it\ first.\r\n\ @return\ true\ if\ player\ has\ won\ the\ game\r\n
comment2.params=
comment2.target=void\ createRooms()
comment2.text=\r\n\ Create\ all\ the\ rooms\ and\ link\ their\ exits\ together.\r\n
comment3.params=
comment3.target=void\ addItems()
comment4.params=
comment4.target=void\ createNpc()
comment5.params=
comment5.target=void\ play()
comment5.text=\r\n\ \ Main\ play\ routine.\ \ Loops\ until\ end\ of\ play.\r\n
comment6.params=
comment6.target=void\ printWelcome()
comment6.text=\r\n\ Print\ out\ the\ opening\ message\ for\ the\ player.\r\n
comment7.params=command
comment7.target=boolean\ processCommand(Command)
comment7.text=\r\n\ Given\ a\ command,\ process\ (that\ is\:\ execute)\ the\ command.\r\n\ @param\ command\ The\ command\ to\ be\ processed.\r\n\ @return\ true\ If\ the\ command\ ends\ the\ game,\ false\ otherwise.\r\n
comment8.params=
comment8.target=void\ printHelp()
comment8.text=\r\n\ Print\ out\ some\ help\ information.\r\n\ Here\ we\ print\ some\ stupid,\ cryptic\ message\ and\ a\ list\ of\ the\ \r\n\ command\ words.\r\n
comment9.params=command
comment9.target=void\ goRoom(Command)
comment9.text=\r\n\ Try\ to\ in\ to\ one\ direction.\ If\ there\ is\ an\ unlocked\ exit.\r\n\ If\ the\ exit\ is\ locked,\ try\ and\ unlock\ it.\r\n\ Otherwise,\ print\ an\ error\ message.\r\n\ @param\ command\ -\ contains\ the\ direction\r\n
numComments=19
